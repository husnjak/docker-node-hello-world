AWSTemplateFormatVersion: '2010-09-09'
Description: Create ECS Service with Fargate
Parameters:
  ServiceName:
    Type: String
    Default: IGDBcom
  ContainerPort:
    Type: Number
    Default: 4000
  ContainerCPU:
    Type: String
    Default: 512
  ContainerMemory: 
    Type: String
    Default: 2048
  Image:
    Type: String
    Default: 121715975140.dkr.ecr.us-east-1.amazonaws.com/igdbcom-image

Resources:
# ---- Docker Container settings ----
  IGDBcomCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]
  
  IGDBcomTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
          - "FARGATE"
      Cpu: !Ref ContainerCPU
      Memory: !Ref ContainerMemory
      NetworkMode: "awsvpc"
      ExecutionRoleArn: !GetAtt IGDBcomExecutionRole.Arn
      TaskRoleArn: !GetAtt IGDBcomExecutionRole.Arn
      Family: !Ref ServiceName
      ContainerDefinitions:
        - 
          Name: !Join ['', [!Ref ServiceName, Container]]
          Image: !Ref Image
          PortMappings: 
            - 
              ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
              Protocol: tcp

  IGDBcomService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref IGDBcomCluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref IGDBcomSecurityGroup
          Subnets: 
            - !Ref Subnet1
      ServiceName: "igdbcom-service"
      LoadBalancers:
        - 
          ContainerName: !Join ['', [!Ref ServiceName, Container]]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref IGDBELBTargetGroup
      TaskDefinition: !Ref IGDBcomTaskDefinition

# ---- AWS Internet Access settings ----

  IGDBLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref IGDBcomSecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Type: application

  IGDBELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - IGDBLoadBalancer
    Properties:
      Name: !Join ['-', [!Ref ServiceName, TargetGroup]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'IGDBcomVPC'
      TargetType: 'ip'

  IGDBcomLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - IGDBLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref IGDBELBTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref IGDBLoadBalancer
      Port: 80
      Protocol: HTTP

  IGDBcomVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - 
          Key: "Name"
          Value: !Ref ServiceName
  
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref IGDBcomVPC
      CidrBlock: 10.0.6.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - 
          Key: "Name"
          Value: !Ref ServiceName
  
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1f
      VpcId: !Ref IGDBcomVPC
      CidrBlock: 10.0.24.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - 
          Key: "Name"
          Value: !Ref ServiceName
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
          - 
            Key: "Name"
            Value: !Ref ServiceName
  
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref IGDBcomVPC
  
  IGDBcomSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for IGDBcom"
      GroupName: !Join ['-', [!Ref ServiceName, Security]]
      SecurityGroupIngress: 
        - 
          IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: 
        - 
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref IGDBcomVPC
      Tags:
        - 
          Key: "Name"
          Value: !Ref ServiceName

  IGDBcomRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IGDBcomVPC
      Tags:
        - 
          Key: "Name"
          Value: !Ref ServiceName

  IGDBcomRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref IGDBcomRouteTable

  IGDBRouteSubnetAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IGDBcomRouteTable
      SubnetId: !Ref Subnet1

  IGDBRouteSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IGDBcomRouteTable
      SubnetId: !Ref Subnet2

# ---- ECS execution role ----

  IGDBcomExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "igdbcom-execution-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - 
          PolicyName: "igdbcom-execution-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: "*"